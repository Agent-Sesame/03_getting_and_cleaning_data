col.names = variable_label)
train_subject <- read.table("./train/subject_train.txt",
sep = " " ,
header = FALSE,
col.names = "subject_id")
train_activities <- read.table("./train/y_train.txt",
sep = " " ,
header = FALSE,
col.names = "activity_id")
train_measurements <- read.table("./train/X_train.txt",
header = FALSE,
col.names = variable_label)
# Combine test subject, activity and measurement data
test_data <- cbind(test_subject, test_activities, test_measurements)
# Comibine training subject, activity and measurement data
train_data <- cbind(train_subject, train_activities, train_measurements)
# Add source indicator to test_data and train_data prior to rbind-ing.
train_type <- as.data.frame(c(rep("test", dim(test_subject)[1]),
rep("train", dim(train_subject)[1])))
# Name source name 'data.type'
colnames(train_type) <- "data_type"
# Combine test_data & train_data with rbind with source indicator by cbind
dat <- cbind(train_type, rbind(test_data, train_data))
# Merge all_activity_data and descriptive label names for the activity ID
dat <- merge(dat, activity_labels, by = "activity_id")
# Use grep to pattern match, list the column numbers for mean and standard
# deviation data to extract only those measurements from the larger data set.
# This method allows for dynamic extraction of in-scope data without
# respect to column position in the larger data set.
mean_std_variables <- c(grep("data_type", names(dat), fixed = TRUE),
grep("subject_id", names(dat), fixed = TRUE),
grep("activity_label", names(dat), fixed = TRUE),
grep("_mean_", names(dat)),
grep("_std_", names(dat)))
# subset all_activity_data using vector mean_std_variables.
dat <- dat[mean_std_variables]
# reshape data to be tall and skinny instead of short and fat
dat <- melt.data.frame(dat, id=c("data_type", "subject_id", "activity_label"))
# Group by Activity, Subject
dat <- group_by(dat, activity_label, subject_id)
# Then calculate the average of each variable
rm(activity_labels, descriptive_labels, features_labels, test_activities, test_data, test_measurements, test_subject, train_activities, train_data, train_measurements, train_subject, train_type)
rm(mean_std_variables, variable_label)
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
View(dat)
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
tidydf <- summarize(dat,
activity = n_distinct(variable),
subject = n_distinct(activity_label),
variable = n_distinct(subject_id),
variable_mean = mean(value))
View(tidydf)
tidydf <- summarize(dat,
activity = n_distinct(activity_label),
subject = n_distinct(subject_id),
variable_mean = mean(value))
View(tidydf)
dat <- group_by(dat, activity_label, subject_id, variable)
tidydf <- summarize(dat,
activity = n_distinct(activity_label),
subject = n_distinct(subject_id),
variable_mean = mean(value))
View(tidydf)
rm(tidydf)
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
dat <- group_by(dat, activity_label, subject_id, variable)
tidydf <- summarize(dat,
activity = n_distinct(activity_label),
subject = n_distinct(subject_id),
variable = n_distinct(variable),
variable_mean = mean(value))
activity_labels <- read.table("activity_labels.txt",
sep = " ",
header = FALSE,
col.names = c("activity_id",
"activity_label"))
features_labels <- read.table("features.txt",
sep = " " ,
header = FALSE,
col.names = c("features_id",
"features_label"))
# modify features lables for lintable, descriptive variable names
descriptive_labels <- as.vector(features_labels$features_label)
descriptive_labels <- gsub("()-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("()", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- tolower(descriptive_labels)
descriptive_labels <- as.data.frame(descriptive_labels)
features_labels <- bind_cols(features_labels, descriptive_labels)
# Create unique measurement variables from features_lables variable content
variable_label <- make.names(as.vector(features_labels[, 3]), unique = TRUE)
# Import data from UCI Har Dataset wearable computing data
test_subject <- read.table("./test/subject_test.txt",
sep = " " ,
header = FALSE,
col.names = "subject_id")
test_activities <- read.table("./test/y_test.txt",
sep = " " ,
header = FALSE,
col.names = "activity_id")
test_measurements <- read.table("./test/X_test.txt",
header = FALSE,
col.names = variable_label)
train_subject <- read.table("./train/subject_train.txt",
sep = " " ,
header = FALSE,
col.names = "subject_id")
train_activities <- read.table("./train/y_train.txt",
sep = " " ,
header = FALSE,
col.names = "activity_id")
train_measurements <- read.table("./train/X_train.txt",
header = FALSE,
col.names = variable_label)
# Combine test subject, activity and measurement data
test_data <- cbind(test_subject, test_activities, test_measurements)
# Comibine training subject, activity and measurement data
train_data <- cbind(train_subject, train_activities, train_measurements)
# Add source indicator to test_data and train_data prior to rbind-ing.
train_type <- as.data.frame(c(rep("test", dim(test_subject)[1]),
rep("train", dim(train_subject)[1])))
# Name source name 'data.type'
colnames(train_type) <- "data_type"
# Combine test_data & train_data with rbind with source indicator by cbind
dat <- cbind(train_type, rbind(test_data, train_data))
# Merge all_activity_data and descriptive label names for the activity ID
dat <- merge(dat, activity_labels, by = "activity_id")
# Use grep to pattern match, list the column numbers for mean and standard
# deviation data to extract only those measurements from the larger data set.
# This method allows for dynamic extraction of in-scope data without
# respect to column position in the larger data set.
mean_std_variables <- c(grep("data_type", names(dat), fixed = TRUE),
grep("subject_id", names(dat), fixed = TRUE),
grep("activity_label", names(dat), fixed = TRUE),
grep("_mean_", names(dat)),
grep("_std_", names(dat)))
# subset all_activity_data using vector mean_std_variables.
dat <- dat[mean_std_variables]
# reshape data to be tall and skinny instead of short and fat
dat <- melt.data.frame(dat, id=c("data_type", "subject_id", "activity_label"))
# Group by Activity, Subject
dat <- group_by(dat, activity_label, subject_id, variable)
View(dat)
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
activity_labels <- read.table("activity_labels.txt",
sep = " ",
header = FALSE,
col.names = c("activity_id",
"activity_label"))
features_labels <- read.table("features.txt",
sep = " " ,
header = FALSE,
col.names = c("features_id",
"features_label"))
# modify features lables for lintable, descriptive variable names
descriptive_labels <- as.vector(features_labels$features_label)
descriptive_labels <- gsub("()-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("()", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- tolower(descriptive_labels)
descriptive_labels <- as.data.frame(descriptive_labels)
features_labels <- bind_cols(features_labels, descriptive_labels)
# Create unique measurement variables from features_lables variable content
variable_label <- make.names(as.vector(features_labels[, 3]), unique = TRUE)
# Import data from UCI Har Dataset wearable computing data
test_subject <- read.table("./test/subject_test.txt",
sep = " " ,
header = FALSE,
col.names = "subject_id")
test_activities <- read.table("./test/y_test.txt",
sep = " " ,
header = FALSE,
col.names = "activity_id")
test_measurements <- read.table("./test/X_test.txt",
header = FALSE,
col.names = variable_label)
train_subject <- read.table("./train/subject_train.txt",
sep = " " ,
header = FALSE,
col.names = "subject_id")
train_activities <- read.table("./train/y_train.txt",
sep = " " ,
header = FALSE,
col.names = "activity_id")
train_measurements <- read.table("./train/X_train.txt",
header = FALSE,
col.names = variable_label)
# Combine test subject, activity and measurement data
test_data <- cbind(test_subject, test_activities, test_measurements)
# Comibine training subject, activity and measurement data
train_data <- cbind(train_subject, train_activities, train_measurements)
# Add source indicator to test_data and train_data prior to rbind-ing.
train_type <- as.data.frame(c(rep("test", dim(test_subject)[1]),
rep("train", dim(train_subject)[1])))
# Name source name 'data.type'
colnames(train_type) <- "data_type"
# Combine test_data & train_data with rbind with source indicator by cbind
dat <- cbind(train_type, rbind(test_data, train_data))
# Merge all_activity_data and descriptive label names for the activity ID
dat <- merge(dat, activity_labels, by = "activity_id")
# Use grep to pattern match, list the column numbers for mean and standard
# deviation data to extract only those measurements from the larger data set.
# This method allows for dynamic extraction of in-scope data without
# respect to column position in the larger data set.
mean_std_variables <- c(grep("data_type", names(dat), fixed = TRUE),
grep("subject_id", names(dat), fixed = TRUE),
grep("activity_label", names(dat), fixed = TRUE),
grep("_mean_", names(dat)),
grep("_std_", names(dat)))
# subset all_activity_data using vector mean_std_variables.
dat <- dat[mean_std_variables]
# reshape data to be tall and skinny instead of short and fat
dat <- melt.data.frame(dat, id=c("data_type", "subject_id", "activity_label"))
# Group by Activity, Subject
dat <- group_by(dat, variable, activity_label, subject_id)
# Then calculate the average of each variable
View(dat)
tidydf <- summarize(dat,
variable = n_distinct(variable),
activity = n_distinct(activity_label),
subject = n_distinct(subject_id),
variable_mean = mean(value))
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
getwd()
setwd("..")
rm(list = ls())
q()
# load required packages in namespace
library(reshape)
library(dplyr)
# Import UCI Har Dataset static data under directory 'data'
setwd("./data")
activity_labels <- read.table("activity_labels.txt",
sep = " ",
header = FALSE,
col.names = c("activity_id",
"activity_label"))
features_labels <- read.table("features.txt",
sep = " " ,
header = FALSE,
col.names = c("features_id",
"features_label"))
# modify features lables for lintable, descriptive variable names
descriptive_labels <- as.vector(features_labels$features_label)
descriptive_labels <- gsub("()-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("()", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- tolower(descriptive_labels)
descriptive_labels <- as.data.frame(descriptive_labels)
features_labels <- bind_cols(features_labels, descriptive_labels)
# Create unique measurement variables from features_lables variable content
variable_label <- make.names(as.vector(features_labels[, 3]), unique = TRUE)
# Import data from UCI Har Dataset wearable computing data
test_subject <- read.table("./test/subject_test.txt",
sep = " " ,
header = FALSE,
col.names = "subject_id")
test_activities <- read.table("./test/y_test.txt",
sep = " " ,
header = FALSE,
col.names = "activity_id")
test_measurements <- read.table("./test/X_test.txt",
header = FALSE,
col.names = variable_label)
train_subject <- read.table("./train/subject_train.txt",
sep = " " ,
header = FALSE,
col.names = "subject_id")
train_activities <- read.table("./train/y_train.txt",
sep = " " ,
header = FALSE,
col.names = "activity_id")
train_measurements <- read.table("./train/X_train.txt",
header = FALSE,
col.names = variable_label)
# Combine test subject, activity and measurement data
test_data <- cbind(test_subject, test_activities, test_measurements)
# Comibine training subject, activity and measurement data
train_data <- cbind(train_subject, train_activities, train_measurements)
# Add source indicator to test_data and train_data prior to rbind-ing.
train_type <- as.data.frame(c(rep("test", dim(test_subject)[1]),
rep("train", dim(train_subject)[1])))
# Name source name 'data.type'
colnames(train_type) <- "data_type"
# Combine test_data & train_data with rbind with source indicator by cbind
dat <- cbind(train_type, rbind(test_data, train_data))
# Merge all_activity_data and descriptive label names for the activity ID
dat <- merge(dat, activity_labels, by = "activity_id")
# Use grep to pattern match, list the column numbers for mean and standard
# deviation data to extract only those measurements from the larger data set.
# This method allows for dynamic extraction of in-scope data without
# respect to column position in the larger data set.
mean_std_variables <- c(grep("data_type", names(dat), fixed = TRUE),
grep("subject_id", names(dat), fixed = TRUE),
grep("activity_label", names(dat), fixed = TRUE),
grep("_mean_", names(dat)),
grep("_std_", names(dat)))
# subset all_activity_data using vector mean_std_variables.
dat <- dat[mean_std_variables]
# reshape data to be tall and skinny instead of short and fat
dat <- melt.data.frame(dat, id=c("data_type", "subject_id", "activity_label"))
View(dat)
?par
rm(activity_labels, descriptive_labels, features_labels, test_activities, test_data, test_measurements, test_subject, train_activities, train_data, train_measurements, train_subject, train_type, mean_std_variables, variable_label)
trialgrouping <- group_by(dat, activity_label, subject_id)
?summarise
trialgrouping %>% summarise(mean = mean(dat$value))
trialgrouping <- group_by(dat, variable, activity_label, subject_id)
trialgrouping %>% summarise(mean = mean(dat$value))
whatistheresult <- trialgrouping %>% summarise(mean = mean(dat$value))
View(whatistheresult)
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
q()
trialgrouping <- group_by(dat, variable, activity_label, subject_id)
library(reshape)
library(dplyr)
trialgrouping <- group_by(dat, variable, activity_label, subject_id)
whatistheresult <- trialgrouping %>% summarise(mean = mean(value))
View(whatistheresult)
tidydf <- group_by(dat, variable, activity_label, subject_id)
tidydf <- tidydf %>% summarise(mean = mean(value))
View(tidydf)
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
View(tidydf)
getwd()
setwd("./data")
getwd()
setwd("..")
getwd()
setwd("./output")
getwd()
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
library(lintr)
lintr::lint("run_analysisR")
lintr::lint("run_analysis.R")
getwd()
setwd("..")
getwd()
lintr::lint("run_analysis.R")
lintr::lint("run_analysis_NEW.R")
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
lintr::lint("run_analysis_NEW.R")
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
lintr::lint("run_analysis_NEW.R")
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
lintr::lint("run_analysis_NEW.R")
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
lintr::lint("run_analysis_NEW.R")
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
lintr::lint("run_analysis_NEW.R")
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
rm(list = ls())
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis_NEW.R')
run_analysis()
q()
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis.R')
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis.R')
library(lintr)
lint("run_analysis.R")
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis.R')
lint("run_analysis.R")
library(reshape)
library(dplyr)
lint("run_analysis.R")
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis.R')
lint("run_analysis.R")
?install.packages
View(run_analysis)
View(run_analysis)
source('./run_analysis.R')
getwd()
setwd("./output")
tidydf <- read.table("./tidysummarizedata.txt", header = TRUE)
View(tidydf)
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis.R')
tidydf <- read.table("./tidysummarizedata.txt", header = TRUE)
View(tidydf)
rm(list = ls())
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis.R')
setwd("./data")
activity_labels <- read.table("activity_labels.txt",
sep = " ",
header = FALSE,
col.names = c("activity_id",
"activity_label"))
features_labels <- read.table("features.txt",
sep = " ",
header = FALSE,
col.names = c("features_id",
"features_label"))
getwd()
setwd("..")
# load required packages in namespace
library(reshape)
library(dplyr)
# Import UCI Har Dataset static data under directory 'data'
setwd("./data")
activity_labels <- read.table("activity_labels.txt",
sep = " ",
header = FALSE,
col.names = c("activity_id",
"activity_label"))
features_labels <- read.table("features.txt",
sep = " ",
header = FALSE,
col.names = c("features_id",
"features_label"))
descriptive_labels <- as.vector(features_labels$features_label)
descriptive_labels <- gsub("()-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("()", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- tolower(descriptive_labels)
descriptive_labels <- as.data.frame(descriptive_labels)
features_labels <- bind_cols(features_labels, descriptive_labels)
variable_label <- make.names(as.vector(features_labels[, 3]), unique = TRUE)
# Import data from UCI Har Dataset wearable computing data
test_subject <- read.table("./test/subject_test.txt",
sep = " ",
header = FALSE,
col.names = "subject_id")
test_activities <- read.table("./test/y_test.txt",
sep = " ",
header = FALSE,
col.names = "activity_id")
test_measurements <- read.table("./test/X_test.txt",
header = FALSE,
col.names = variable_label)
train_subject <- read.table("./train/subject_train.txt",
sep = " ",
header = FALSE,
col.names = "subject_id")
train_activities <- read.table("./train/y_train.txt",
sep = " ",
header = FALSE,
col.names = "activity_id")
train_measurements <- read.table("./train/X_train.txt",
header = FALSE,
col.names = variable_label)
View(activity_labels)
View(features_labels)
dim(train_activities)
rm(list = ls())
tidydf <- read.table("./tidysummarizedata.txt", header = TRUE)
View(tidydf)
getwd()
set('..')
setwd("..")
setwd("./output")
tidydf <- read.table("./tidysummarizedata.txt", header = TRUE)
View(tidydf)
str(tidydf)
summary(tidydf)
tidydf$variable
as.data.frame(tidydf$variable)
?unique
as.data.frame(unique(tidydf$variable))
features_labels <- read.table("features.txt",
sep = " ",
header = FALSE,
col.names = c("features_id",
"features_label"))
# modify features lables for lintable, descriptive variable names
descriptive_labels <- as.vector(features_labels$features_label)
descriptive_labels <- gsub("()-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("()", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- tolower(descriptive_labels)
descriptive_labels <- as.data.frame(descriptive_labels)
features_labels <- bind_cols(features_labels, descriptive_labels)
features_labels <- read.table("features.txt",
sep = " ",
header = FALSE,
col.names = c("features_id",
"features_label"))
# modify features lables for lintable, descriptive variable names
descriptive_labels <- as.vector(features_labels$features_label)
descriptive_labels <- gsub("()-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("()", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- tolower(descriptive_labels)
descriptive_labels <- as.data.frame(descriptive_labels)
features_labels <- bind_cols(features_labels, descriptive_labels)
getwd()
setwd("..")
getwd("./data/")
getwd("./data")
setwd("./data")
getwd()
features_labels <- read.table("features.txt",
sep = " ",
header = FALSE,
col.names = c("features_id",
"features_label"))
# modify features lables for lintable, descriptive variable names
descriptive_labels <- as.vector(features_labels$features_label)
descriptive_labels <- gsub("()-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("()", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- gsub("-", "_", descriptive_labels, fixed = TRUE)
descriptive_labels <- tolower(descriptive_labels)
descriptive_labels <- as.data.frame(descriptive_labels)
features_labels <- bind_cols(features_labels, descriptive_labels)
write.csv(features_labels, "a.csv")
rm(list = ls())
source('~/Github/coursera/03_getting_and_cleaning_data/run_analysis.R')
getwd()
setwd("..")
getwd()
q()
